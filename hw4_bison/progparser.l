/***********************************************************
 * hint.l
 ***********************************************************/
/* -- PREAMBLE  ------------------------------------------ */
%{
#include <iostream>
#include <iomanip>
#include "progparser.tab.h"      // file generated by Bison
using namespace std;

int line_num = 1;      // to keep line numbers

// Function prototype
void writeToken(const char* toktype);

%}

     /* -- OPTIONS and DEFINITIONS ----------------------- */
%option noyywrap

WHITE      [ \t]
DIGIT      [0-9]
ALPHA      [a-zA-Z]
ALPHANUM   [a-zA-Z0-9]

%%   /* -- REGULAR EXPRESSIONS ---------------------------- */

{WHITE}    ;                /* eat white space */
\n         { line_num++; }  /* count line numbers */

 /* Keywork tokens */
"!"        { writeToken("K_BANG"); return K_BANG; }
":="       { writeToken("K_ASSIGN"); return K_ASSIGN; }
"("        { writeToken("K_LPAREN"); return K_LPAREN; }
")"        { writeToken("K_RPAREN"); return K_RPAREN; }
"PRINT"    { writeToken("K_PRINT"); return K_PRINT; }

 /* Complex Tokens */
{ALPHA}{ALPHANUM}*         { writeToken("T_IDENT"); return T_IDENT; }
[+-]?{DIGIT}+              { writeToken("T_INTEGER"); return T_INTEGER; }
[+-]?{DIGIT}+\.{DIGIT}+    { writeToken("T_DECIMAL"); return T_DECIMAL; }


%%   /* -- EPILOGUE  -------------------------------------- */

// Purpose: prints that a token was found
void writeToken(const char* toktype)
{
  cout << "TOKEN: ";
  cout << left << setw(14) << toktype;
  cout << "LEXEME: " << yytext << endl;
}
